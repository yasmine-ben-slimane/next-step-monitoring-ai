input {
  http {
    host => "0.0.0.0"
    port => 5044
    codec => json
    type => "zabbix-metrics"
    add_field => { "pipeline" => "zabbix-http-input" }
  }
}

filter {
  # Handle JSON parse failures
  if "_jsonparsefailure" in [tags] {
    mutate {
      add_field => { 
        "measurement" => "json_parse_error"
        "error_type" => "json_parsing_failed"
      }
    }
    # Skip further processing for failed JSON
  } else if [type] == "zabbix-metrics" {
    
    # Validate required fields exist
    if ![itemid] or ![clock] or ![value] {
      mutate {
        add_tag => [ "missing_required_fields" ]
        add_field => { "measurement" => "invalid_data" }
      }
    } else {
      
      # Convert Unix timestamp to proper datetime
      if [clock] {
        date {
          match => [ "clock", "UNIX" ]
          target => "@timestamp"
        }
        
        mutate {
          convert => { "clock" => "integer" }
        }
      }
      
      # Handle different data types
      if [table_type] == "history" {
        mutate {
          convert => { 
            "value" => "float" 
            "itemid" => "integer"
            "ns" => "integer"
          }
          add_field => { 
            "data_type" => "numeric"
            "value_category" => "float"
          }
        }
      } else if [table_type] == "history_uint" {
        mutate {
          convert => { 
            "value" => "integer" 
            "itemid" => "integer"
            "ns" => "integer"
          }
          add_field => { 
            "data_type" => "numeric"
            "value_category" => "integer"
          }
        }
      }
      
      # Create measurement name with better cleaning
      if [item_key] {
        mutate {
          copy => { "item_key" => "measurement" }
        }
        
        mutate {
          gsub => [
            "measurement", "[^a-zA-Z0-9_]", "_",
            "measurement", "__+", "_",
            "measurement", "^_+", "",
            "measurement", "_+$", ""
          ]
        }
      } else {
        mutate {
          add_field => { "measurement" => "unknown_metric" }
        }
      }
      
      # Clean hostname
      if [hostname] {
        mutate {
          copy => { "hostname" => "host_name" }
          gsub => [
            "host_name", "[^a-zA-Z0-9_-]", "_"
          ]
        }
      }
      
      # Clean units
      if [units] {
        mutate {
          copy => { "units" => "unit_type" }
          gsub => [
            "unit_type", "[^a-zA-Z0-9_%]", "_"
          ]
        }
      } else {
        mutate {
          add_field => { "unit_type" => "none" }
        }
      }
      
      # Add metadata
      mutate {
        add_field => { "source_system" => "zabbix" }
        convert => { "itemid" => "string" }
      }
    }
    
    # Clean up fields
    mutate {
      remove_field => [ 
        "headers", 
        "host", 
        "@version"
      ]
    }
  }
}

output {
  # Only send valid numeric data to InfluxDB
  if [data_type] == "numeric" and !("missing_required_fields" in [tags]) {
    http {
      url => "http://influxdb:8086/api/v2/write?org=zabbix-org&bucket=zabbix-metrics&precision=s"
      http_method => "post"
      headers => {
        "Authorization" => "Token my-super-secret-auth-token"
        "Content-Type" => "text/plain"
      }
      
      format => "message"
      message => "%{measurement},host=%{host_name},item_id=%{itemid},data_type=%{data_type},unit=%{unit_type} value=%{value} %{clock}"
    }
  }
  
  # Debug output (you can disable this later)
  stdout {
    codec => rubydebug {
      metadata => false
    }
  }
}
